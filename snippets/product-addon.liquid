{% if product %}
  <div  x-cloak x-data="{ openModal: false }" class="product-addon">
    <div class="product-addon-content">
      <!-- Image trigger for modal -->
      <div class="modal-image-container">
      <img
        src="{{ product.featured_image | image_url: width: 62, height: 62 }}"
        width="62"
        height="62"
        alt="{{ product.title | escape }}"
        @click="openModal = true"
        style="cursor: pointer;"
      >
      <div class="modal-text"  @click="openModal = true">Quick View</div>
      </div>      <p>{{ product.title }}</p>
      <p>{{ product.price | money_with_currency }}</p>
    </div>
    <button
      x-data="productAddon({{ product.variants.first.id | json }})"
      x-text="addedToCart ? '- Remove' : '+ Add'"
      :class="{'added': addedToCart, 'not-added': !addedToCart}"
      @click="toggleAddToCart()"
    ></button>

    <!-- Modal -->
    <div
      x-show="openModal"
      class="modal"
      x-transition:enter="ease-out duration-300"
      x-transition:enter-start="opacity-0 scale-90"
      x-transition:enter-end="opacity-100 scale-100"
      x-transition:leave="ease-in duration-300"
      x-transition:leave-start="opacity-100 scale-100"
      x-transition:leave-end="opacity-0 scale-90"
      style="background-color: rgba(0, 0, 0, 0.5); position: fixed; top: 0; left: 0; right: 0; bottom: 0; display: flex; align-items: center; justify-content: center; height:100%"
    >
      <div style=" display: flex; align-items: center; justify-content: center; height:100%">
        <div
          class="modal-inner"
          style=" background: white; padding: 20px; border-radius: 5px; max-width: 800px; width: auto; margin: auto; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);"
        >
          <div style="display: flex;">
            <div style="flex:1;">
              <img
                src="{{ product.featured_image | image_url: width: 300, height: 300 }}"
                width="300"
                height="300"
                alt="{{ product.title | escape }}"
              >
            </div>
            <div style="flex:1;">
              <!-- Close button -->
              <div style="display: flex; justify-content:flex-end">
                <button @click="openModal = false" style="cursor: pointer;border:none ">&times;</button>
              </div>
              <h2>{{ product.title }}</h2>
              <p>{{ product.price | money_with_currency }}</p>
              <div class="rte my-3 text-theme-basic {{ block.settings.text_align }}">
                {{ product.description }}
              </div>
              <div
                x-data="productAddon({{ product.variants.first.id | json }})"
                style="display: flex; justify-content:flex-end"
              >
                <button
                  @click="addToCart()"
                  x-text="addedToCart ? 'Added to Cart' : 'Add to Cart'"
                  :class="{'added': addedToCart, 'not-added': !addedToCart}"
                  class="primary-button shop-btn"
                ></button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{% else %}
  <p>Product not found.</p>
{% endif %}

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('productAddon', function (productId) {
      return {
        productId: productId,
        addedToCart: false,
        addToCart() {
          if (!this.addedToCart) {
            console.log('Processing to add the product to cart for product ID:', this.productId);
            // Simulate adding to cart (replace with actual logic)
            this.addedToCart = true;
            // Simulate dispatching an event (replace with actual logic if needed)
            this.$dispatch('add-to-cart', { productId: this.productId, added: true });
          } else {
            console.log('Product already added to the cart.');
          }
        },
        toggleAddToCart() {
          this.addedToCart = !this.addedToCart;
          this.$dispatch('add-to-cart', { productId: this.productId, added: this.addedToCart });
        },
        init() {
          document.addEventListener('reset-addons', () => {
            this.addedToCart = false;
          });
        },
      };
    });
  });
</script>
